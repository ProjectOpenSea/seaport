// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

import { Vm } from "forge-std/Vm.sol";
import { Account } from "../BaseOrderTest.sol";
import { Result } from "./FuzzHelpers.sol";
import "seaport-sol/SeaportSol.sol";

struct FuzzParams {
    uint256 seed;
    uint256 totalOrders;
    uint256 maxOfferItems;
    uint256 maxConsiderationItems;
}

struct ReturnValues {
    bool fulfilled;
    bool cancelled;
    bool validated;
    bool[] availableOrders;
    Execution[] executions;
}

interface TestHelpers {
    function makeAccount(
        string memory name
    ) external view returns (Account memory);

    function getMatchedFulfillments(
        AdvancedOrder[] memory orders
    )
        external
        returns (
            Fulfillment[] memory fulfillments,
            MatchComponent[] memory remainingOfferComponents,
            MatchComponent[] memory remainingConsiderationComponents
        );
}

struct FuzzTestContext {
    /**
     * @dev An array of AdvancedOrders
     */
    AdvancedOrder[] orders;
    /**
     * @dev A Seaport interface, either the reference or optimized version.
     */
    SeaportInterface seaport;
    /**
     * @dev A ConduitController interface.
     */
    ConduitControllerInterface conduitController;
    /**
     * @dev A caller address. If this is nonzero, the FuzzEngine will prank this
     *      address before calling exec.
     */
    address caller;
    /**
     * @dev A struct containing fuzzed params generated by the Foundry fuzzer.
     *      Right now these params include only a uint256 seed, which we could
     *      potentially use to generate other random data.
     */
    FuzzParams fuzzParams;
    /**
     * @dev An array of function selectors for "checks". The FuzzEngine will
     *      call these functions after calling exec to make assertions about
     *      the resulting test state.
     */
    bytes4[] checks;
    /**
     * @dev Additional data we might need to fulfill an order. This is basically
     *      the superset of all the non-order args to SeaportInterface
     *      functions, like conduit key, criteria resolvers, and fulfillments.
     *      if you don't want to set these parameters every time, use
     *      FuzzTestContextLib.from() to create a FuzzTestContext with these fields
     *      pre-populated with empty defaults.
     */
    uint256 counter;
    bytes32 fulfillerConduitKey;
    CriteriaResolver[] criteriaResolvers;
    address recipient;
    Fulfillment[] fulfillments;
    FulfillmentComponent[][] offerFulfillments;
    FulfillmentComponent[][] considerationFulfillments;
    uint256 maximumFulfilled;
    BasicOrderParameters basicOrderParameters;
    /**
     * @dev A copy of the original orders array. Use this to make assertions
     *      about the final state of the orders after calling exec. This is
     *      automatically copied if you use the FuzzTestContextLib.from() function.
     */
    AdvancedOrder[] initialOrders;
    /**
     * @dev Expected Result state for each order. Indexes correspond to the
     *      indexes of the orders in the orders array.
     */
    Result[] expectedResults;
    /**
     * @dev Return values from the last call to exec. Superset of return values
     *      from all Seaport functions.
     */
    ReturnValues returnValues;
    bytes32[] expectedZoneCalldataHash;
    Execution[] expectedImplicitExecutions;
    Execution[] expectedExplicitExecutions;
    TestHelpers testHelpers;
}

/**
 * @notice Builder library for FuzzTestContext.
 */
library FuzzTestContextLib {
    using AdvancedOrderLib for AdvancedOrder;
    using AdvancedOrderLib for AdvancedOrder[];
    using BasicOrderParametersLib for BasicOrderParameters;

    /**
     * @dev Create an empty FuzzTestContext.
     *
     * @custom:return emptyContext the empty FuzzTestContext
     */
    function empty() internal view returns (FuzzTestContext memory) {
        return
            FuzzTestContext({
                orders: new AdvancedOrder[](0),
                seaport: SeaportInterface(address(0)),
                conduitController: ConduitControllerInterface(address(0)),
                caller: address(0),
                fuzzParams: FuzzParams({
                    seed: 0,
                    totalOrders: 0,
                    maxOfferItems: 0,
                    maxConsiderationItems: 0
                }),
                checks: new bytes4[](0),
                counter: 0,
                fulfillerConduitKey: bytes32(0),
                criteriaResolvers: new CriteriaResolver[](0),
                recipient: address(0),
                fulfillments: new Fulfillment[](0),
                offerFulfillments: new FulfillmentComponent[][](0),
                considerationFulfillments: new FulfillmentComponent[][](0),
                maximumFulfilled: 0,
                basicOrderParameters: BasicOrderParametersLib.empty(),
                initialOrders: new AdvancedOrder[](0),
                expectedResults: new Result[](0),
                returnValues: ReturnValues({
                    fulfilled: false,
                    cancelled: false,
                    validated: false,
                    availableOrders: new bool[](0),
                    executions: new Execution[](0)
                }),
                expectedZoneCalldataHash: new bytes32[](0),
                expectedImplicitExecutions: new Execution[](0),
                expectedExplicitExecutions: new Execution[](0),
                testHelpers: TestHelpers(address(this))
            });
    }

    /**
     * @dev Create a FuzzTestContext from the given partial arguments.
     *
     * @param orders the AdvancedOrder[] to set
     * @param seaport the SeaportInterface to set
     * @param caller the caller address to set
     * @custom:return _context the FuzzTestContext
     */
    function from(
        AdvancedOrder[] memory orders,
        SeaportInterface seaport,
        address caller
    ) internal view returns (FuzzTestContext memory) {
        return
            FuzzTestContext({
                orders: orders,
                seaport: seaport,
                conduitController: ConduitControllerInterface(address(0)),
                caller: caller,
                fuzzParams: FuzzParams({
                    seed: 0,
                    totalOrders: 0,
                    maxOfferItems: 0,
                    maxConsiderationItems: 0
                }),
                checks: new bytes4[](0),
                counter: 0,
                fulfillerConduitKey: bytes32(0),
                criteriaResolvers: new CriteriaResolver[](0),
                recipient: address(0),
                fulfillments: new Fulfillment[](0),
                offerFulfillments: new FulfillmentComponent[][](0),
                considerationFulfillments: new FulfillmentComponent[][](0),
                maximumFulfilled: 0,
                basicOrderParameters: BasicOrderParametersLib.empty(),
                initialOrders: orders.copy(),
                returnValues: ReturnValues({
                    fulfilled: false,
                    cancelled: false,
                    validated: false,
                    availableOrders: new bool[](0),
                    executions: new Execution[](0)
                }),
                expectedResults: new Result[](0),
                expectedZoneCalldataHash: new bytes32[](0),
                expectedImplicitExecutions: new Execution[](0),
                expectedExplicitExecutions: new Execution[](0),
                testHelpers: TestHelpers(address(this))
            });
    }

    /**
     * @dev Sets the orders on a FuzzTestContext
     *
     * @param context the FuzzTestContext to set the orders of
     * @param orders the AdvancedOrder[] to set
     *
     * @return _context the FuzzTestContext with the orders set
     */
    function withOrders(
        FuzzTestContext memory context,
        AdvancedOrder[] memory orders
    ) internal pure returns (FuzzTestContext memory) {
        context.orders = orders.copy();
        return context;
    }

    /**
     * @dev Sets the SeaportInterface on a FuzzTestContext
     *
     * @param context the FuzzTestContext to set the SeaportInterface of
     * @param seaport the SeaportInterface to set
     *
     * @return _context the FuzzTestContext with the SeaportInterface set
     */
    function withSeaport(
        FuzzTestContext memory context,
        SeaportInterface seaport
    ) internal pure returns (FuzzTestContext memory) {
        context.seaport = seaport;
        return context;
    }

    /**
     * @dev Sets the ConduitControllerInterface on a FuzzTestContext
     *
     * @param context the FuzzTestContext to set the ConduitControllerInterface of
     * @param conduitController the ConduitControllerInterface to set
     *
     * @return _context the FuzzTestContext with the ConduitControllerInterface set
     */
    function withConduitController(
        FuzzTestContext memory context,
        ConduitControllerInterface conduitController
    ) internal pure returns (FuzzTestContext memory) {
        context.conduitController = conduitController;
        return context;
    }

    /**
     * @dev Sets the caller on a FuzzTestContext
     *
     * @param context the FuzzTestContext to set the caller of
     * @param caller the caller address to set
     *
     * @return _context the FuzzTestContext with the caller set
     */
    function withCaller(
        FuzzTestContext memory context,
        address caller
    ) internal pure returns (FuzzTestContext memory) {
        context.caller = caller;
        return context;
    }

    /**
     * @dev Sets the fuzzParams on a FuzzTestContext
     *
     * @param context the FuzzTestContext to set the fuzzParams of
     * @param fuzzParams the fuzzParams struct to set
     *
     * @return _context the FuzzTestContext with the fuzzParams set
     */
    function withFuzzParams(
        FuzzTestContext memory context,
        FuzzParams memory fuzzParams
    ) internal pure returns (FuzzTestContext memory) {
        context.fuzzParams = _copyFuzzParams(fuzzParams);
        return context;
    }

    /**
     * @dev Sets the checks on a FuzzTestContext
     *
     * @param context the FuzzTestContext to set the checks of
     * @param checks the checks array to set
     *
     * @return _context the FuzzTestContext with the checks set
     */
    function withChecks(
        FuzzTestContext memory context,
        bytes4[] memory checks
    ) internal pure returns (FuzzTestContext memory) {
        context.checks = _copyBytes4(checks);
        return context;
    }

    /**
     * @dev Sets the counter on a FuzzTestContext
     *
     * @param context the FuzzTestContext to set the counter of
     * @param counter the counter value to set
     *
     * @return _context the FuzzTestContext with the counter set
     */
    function withCounter(
        FuzzTestContext memory context,
        uint256 counter
    ) internal pure returns (FuzzTestContext memory) {
        context.counter = counter;
        return context;
    }

    /**
     * @dev Sets the fulfillerConduitKey on a FuzzTestContext
     *
     * @param context the FuzzTestContext to set the fulfillerConduitKey of
     * @param fulfillerConduitKey the fulfillerConduitKey value to set
     *
     * @return _context the FuzzTestContext with the fulfillerConduitKey set
     */
    function withFulfillerConduitKey(
        FuzzTestContext memory context,
        bytes32 fulfillerConduitKey
    ) internal pure returns (FuzzTestContext memory) {
        context.fulfillerConduitKey = fulfillerConduitKey;
        return context;
    }

    /**
     * @dev Sets the criteriaResolvers on a FuzzTestContext
     *
     * @param context the FuzzTestContext to set the criteriaResolvers of
     * @param criteriaResolvers the criteriaResolvers array to set
     *
     * @return _context the FuzzTestContext with the criteriaResolvers set
     */
    function withCriteriaResolvers(
        FuzzTestContext memory context,
        CriteriaResolver[] memory criteriaResolvers
    ) internal pure returns (FuzzTestContext memory) {
        context.criteriaResolvers = _copyCriteriaResolvers(criteriaResolvers);
        return context;
    }

    /**
     * @dev Sets the recipient on a FuzzTestContext
     *
     * @param context the FuzzTestContext to set the recipient of
     * @param recipient the recipient value to set
     *
     * @return _context the FuzzTestContext with the recipient set
     */
    function withRecipient(
        FuzzTestContext memory context,
        address recipient
    ) internal pure returns (FuzzTestContext memory) {
        context.recipient = recipient;
        return context;
    }

    /**
     * @dev Sets the fulfillments on a FuzzTestContext
     *
     * @param context the FuzzTestContext to set the fulfillments of
     * @param fulfillments the offerFulfillments value to set
     *
     * @return _context the FuzzTestContext with the fulfillments set
     */
    function withFulfillments(
        FuzzTestContext memory context,
        Fulfillment[] memory fulfillments
    ) internal pure returns (FuzzTestContext memory) {
        context.fulfillments = fulfillments;
        return context;
    }

    /**
     * @dev Sets the offerFulfillments on a FuzzTestContext
     *
     * @param context the FuzzTestContext to set the offerFulfillments of
     * @param offerFulfillments the offerFulfillments value to set
     *
     * @return _context the FuzzTestContext with the offerFulfillments set
     */
    function withOfferFulfillments(
        FuzzTestContext memory context,
        FulfillmentComponent[][] memory offerFulfillments
    ) internal pure returns (FuzzTestContext memory) {
        context.offerFulfillments = _copyFulfillmentComponents(
            offerFulfillments
        );
        return context;
    }

    /**
     * @dev Sets the considerationFulfillments on a FuzzTestContext
     *
     * @param context the FuzzTestContext to set the considerationFulfillments of
     * @param considerationFulfillments the considerationFulfillments value to set
     *
     * @return _context the FuzzTestContext with the considerationFulfillments set
     */
    function withConsiderationFulfillments(
        FuzzTestContext memory context,
        FulfillmentComponent[][] memory considerationFulfillments
    ) internal pure returns (FuzzTestContext memory) {
        context.considerationFulfillments = _copyFulfillmentComponents(
            considerationFulfillments
        );
        return context;
    }

    /**
     * @dev Sets the maximumFulfilled on a FuzzTestContext
     *
     * @param context the FuzzTestContext to set the maximumFulfilled of
     * @param maximumFulfilled the maximumFulfilled value to set
     *
     * @return _context the FuzzTestContext with maximumFulfilled set
     */
    function withMaximumFulfilled(
        FuzzTestContext memory context,
        uint256 maximumFulfilled
    ) internal pure returns (FuzzTestContext memory) {
        context.maximumFulfilled = maximumFulfilled;
        return context;
    }

    /**
     * @dev Sets the basicOrderParameters on a FuzzTestContext
     *
     * @param context the FuzzTestContext to set the fulfillments of
     * @param basicOrderParameters the offerFulfillments value to set
     *
     * @return _context the FuzzTestContext with the fulfillments set
     */
    function withBasicOrderParameters(
        FuzzTestContext memory context,
        BasicOrderParameters memory basicOrderParameters
    ) internal pure returns (FuzzTestContext memory) {
        context.basicOrderParameters = basicOrderParameters;
        return context;
    }

    function _copyBytes4(
        bytes4[] memory selectors
    ) private pure returns (bytes4[] memory) {
        bytes4[] memory copy = new bytes4[](selectors.length);
        for (uint256 i = 0; i < selectors.length; i++) {
            copy[i] = selectors[i];
        }
        return copy;
    }

    function _copyFulfillmentComponents(
        FulfillmentComponent[][] memory fulfillmentComponents
    ) private pure returns (FulfillmentComponent[][] memory) {
        FulfillmentComponent[][]
            memory outerCopy = new FulfillmentComponent[][](
                fulfillmentComponents.length
            );
        for (uint256 i = 0; i < fulfillmentComponents.length; i++) {
            FulfillmentComponent[]
                memory innerCopy = new FulfillmentComponent[](
                    fulfillmentComponents[i].length
                );
            for (uint256 j = 0; j < fulfillmentComponents[i].length; j++) {
                innerCopy[j] = fulfillmentComponents[i][j];
            }
            outerCopy[i] = innerCopy;
        }
        return outerCopy;
    }

    function _copyCriteriaResolvers(
        CriteriaResolver[] memory criteriaResolvers
    ) private pure returns (CriteriaResolver[] memory) {
        CriteriaResolver[] memory copy = new CriteriaResolver[](
            criteriaResolvers.length
        );
        for (uint256 i = 0; i < criteriaResolvers.length; i++) {
            copy[i] = criteriaResolvers[i];
        }
        return copy;
    }

    function _copyFuzzParams(
        FuzzParams memory params
    ) private pure returns (FuzzParams memory) {
        return
            FuzzParams({
                seed: params.seed,
                totalOrders: params.totalOrders,
                maxOfferItems: params.maxOfferItems,
                maxConsiderationItems: params.maxConsiderationItems
            });
    }
}
